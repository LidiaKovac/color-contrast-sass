@use "sass:color";
@use "sass:map";

@use "sass:meta"; //used to detect sass version

@use "./helpers";

$has-sass-color: meta.module-variables("color") != null;

/**
 * Calculates the relative luminance of a given color.
 *
 * Relative luminance is a perceptual brightness of a color in relation to black and white,
 * weighted according to human eye sensitivity (most to green, least to blue).
 * In simpler language, relative luminance is how bright the colors looks compared to b&w. 
 * The ratios in which these are getting multiplied is a number represent how much the human 
 * eye is sensible to it. Green is the color we are the most sensible to.
 *
 * @param {Color} $color - A valid Sass color.
 * @returns {Number} The relative luminance (between 0 and 1).
 * @throws Will throw an error if `$color` is not a valid color.
 */
@function relative-luminance($color) {
	@if meta.type-of($color) != "color" {
		@error "contrast-ratio: $color must be a color, got #{meta.type-of($color)}";
	}

	@if ($has-sass-color) {
		$rgb: (
			"r": calc(color.channel($color, "red", rgb) / 255),
			"g": calc(color.channel($color, "green", rgb) / 255),
			"b": calc(color.channel($color, "blue", rgb) / 255),
		);
		$r: helpers.linearize(map.get($rgb, "r"));
		$g: helpers.linearize(map.get($rgb, "g"));
		$b: helpers.linearize(map.get($rgb, "b"));

		@return (0.2126 * $r) + (0.7152 * $g) + (0.0722 * $b);
	} @else {
		$rgb: (
			"r": calc(#{red($color)} / 255),
			"g": calc(#{green($color)} / 255),
			"b": calc(#{blue($color)} / 255),
		);
		$r: helpers.linearize(map.get($rgb, "r"));
		$g: helpers.linearize(map.get($rgb, "g"));
		$b: helpers.linearize(map.get($rgb, "b"));

		@return (0.2126 * $r) + (0.7152 * $g) + (0.0722 * $b);
	}
}
