@use "sass:color";
@use "sass:map";

/**
 * Converts a gamma-corrected sRGB channel value to a linear-light value.
 *
 * This is a helper function for calculating relative luminance.
 *
 * @param {Number} $channel - The normalized sRGB channel value (between 0 and 1).
 * @returns {Number} The linearized channel value.
 */
@function linearize($channel) {
	@if $channel <= 0.03928 {
		@return calc($channel / 12.92);
	} @else {
		@return pow((($channel + 0.055) / 1.055), 2.4);
	}
}


/**
 * Calculates the relative luminance of a given color.
 *
 * Relative luminance is a perceptual brightness of a color in relation to black and white,
 * weighted according to human eye sensitivity (most to green, least to blue).
 * In simpler language, relative luminance is how bright the colors looks compared to b&w. 
 * The ratios in which these are getting multiplied is a number represent how much the human 
 * eye is sensible to it. Green is the color we are the most sensible to.
 *
 * @param {Color} $color - A valid Sass color.
 * @returns {Number} The relative luminance (between 0 and 1).
 * @throws Will throw an error if `$color` is not a valid color.
 */
@function relative-luminance($color) {
	@if type-of($color) != "color" {
		@error "contrast-ratio: $color must be a color, got #{type-of($color)}";
	}

	$rgb: (
		"r": calc(color.channel($color, "red", rgb) / 255),
		"g": calc(color.channel($color, "green", rgb) / 255),
		"b": calc(color.channel($color, "blue", rgb) / 255),
	);
	$r: linearize(map.get($rgb, "r"));
	$g: linearize(map.get($rgb, "g"));
	$b: linearize(map.get($rgb, "b"));

	
	@return (0.2126 * $r) + (0.7152 * $g) + (0.0722 * $b);
}


/**
 * Calculates the contrast ratio between two colors according to WCAG guidelines.
 *
 * Contrast ratio is used to determine the readability of text over background colors.
 * It ranges from 1 (no contrast) to 21 (maximum contrast).
 *
 * @param {Color} $color1 - The first color.
 * @param {Color} $color2 - The second color.
 * @returns {Number} The contrast ratio between the two colors.
 * @throws Will throw an error if either parameter is not a valid color.
 */
@function contrast-ratio($color1, $color2) {
	@if type-of($color1) != "color" {
		@error "contrast-ratio: $color1 must be a color, got #{type-of($color1)}";
	}

	@if type-of($color2) != "color" {
		@error "contrast-ratio: $color2 must be a color, got #{type-of($color2)}";
	}
	//contrast is calculated based on luminance
	$l1: relative-luminance($color1);
	$l2: relative-luminance($color2);
	$light: max($l1, $l2);
	$dark: min($l1, $l2);
	//0.05 gets added to avoid dividing by 0 on dark colors
	@return calc(($light + 0.05) / ($dark + 0.05));
}


/**
 * Alias for `contrast-ratio`. Represents perceived difference in brightness
 * between two colors.
 *
 * This function is provided for semantic clarity when calculating color difference.
 *
 * @param {Color} $color1 - The first color.
 * @param {Color} $color2 - The second color.
 * @returns {Number} The contrast ratio between the two colors.
 * @throws Will throw an error if either parameter is not a valid color.
 */
@function colour-difference($color1, $color2) {
	@if type-of($color1) != "color" {
		@error "contrast-ratio: $color1 must be a color, got #{type-of($color1)}";
	}

	@if type-of($color2) != "color" {
		@error "contrast-ratio: $color2 must be a color, got #{type-of($color2)}";
	}
	@return contrast-ratio($color1, $color2);
}
