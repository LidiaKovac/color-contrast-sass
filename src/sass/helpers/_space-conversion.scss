@use "sass:meta";
@use "sass:math";
@use "sass:color";
@use "./extract-channel" as helpers;


/**
 * Converts a hue to an RGB component.
 *
 * Used as a helper function in the HSL to RGB conversion algorithm.
 *
 * @param {number} $p - A temporary value derived from lightness and saturation.
 * @param {number} $q - Another temporary value used in color computation.
 * @param {number} $t - The adjusted hue component (can be greater than 1 or less than 0).
 *
 * @returns {number} The RGB component in the [0, 1] range.
 *
 * @example
 *   hue-to-rgb(0.2, 0.8, 0.5) => 0.8
 */
@function hue-to-rgb($p, $q, $t) {
	@if $t < 0 {
		$t: $t + 1;
	} @else if $t > 1 {
		$t: $t - 1;
	}

	@if $t < math.div(1, 6) {
		@return $p + ($q - $p) * 6 * $t;
	} @else if $t < 0.5 {
		@return $q;
	} @else if $t < math.div(2, 3) {
		@return $p + ($q - $p) * (math.div(2, 3) - $t) * 6;
	} @else {
		@return $p;
	}
}


/**
 * Converts an HSL color to its RGB equivalent.
 *
 * Accepts a color in HSL format and returns an equivalent RGB color.
 * Useful for custom color manipulations without relying on native Sass color functions.
 *
 * @param {color} $color - The input color, expected to be in HSL format.
 *
 * @returns {color} A color in RGB format.
 *
 * @throws Will throw an error if the input is not a color.
 *
 * @example
 *   hsl-to-rgb(hsl(120, 100%, 50%)) => rgb(0, 255, 0)
 */
//TODO: use color.channel($color, $channel, $space <- this parameter) to convert hsl
@function hsl-to-rgb($color) {
	@if meta.type-of($color) != "color" {
		@error "Expected a color, got: #{$color}";
	}

	$h: math.div(helpers.extract-hsl-channel($color, "hue"), 360);
	$s: helpers.extract-hsl-channel($color, "saturation");
	$l: helpers.extract-hsl-channel($color, "lightness");

	$r: 0;
	$g: 0;
	$b: 0;
	@if $s == 0 {
		$r: $l;
		$g: $l;
		$b: $l;
	} @else {
		$q: 0;
		@if ($l < 0.5) {
			$q: $l * (1 + $s);
		} @else {
			$q: $l + $s - ($l * $s);
		}
		$p: 2 * $l - $q;

		$r: hue-to-rgb($p, $q, $h + math.div(1, 3));
		$g: hue-to-rgb($p, $q, $h);
		$b: hue-to-rgb($p, $q, $h - math.div(1, 3));
	}

	@return rgb(math.round($r * 255), math.round($g * 255), math.round($b * 255));
}
